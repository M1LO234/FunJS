/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { Start: peg$parseStart },
      peg$startRuleFunction  = peg$parseStart,

      peg$c0 = function(program) { return program; },
      peg$c1 = function(val1, val2) {
          return binaryExp("+", val1, val2);
        },
      peg$c2 = function(val1, val2) {
          return binaryExp("-", val1, val2);
        },
      peg$c3 = function(val1, val2) {
          return binaryExp("*", val1, val2);
        },
      peg$c4 = function(val1, val2) {
          return binaryExp("/", val1, val2);
        },
      peg$c5 = function(val1, val2) {
          return binaryExp("**", val1, val2);
        },
      peg$c6 = function(ident, statement) {
          return varDeclaration(ident, statement);
        },
      peg$c7 = function(ident, statement) {
          return varAssignment(ident, statement)
        },
      peg$c8 = function(type1, type2, func, par, res) {
          const types = [type1, ...type2.map(array => array[3])];
          return funDeclaration(func, par, res, types);
        },
      peg$c9 = function(func, par1, par2) {
          const pars = [par1, ...par2.map(array => array[3])]
          return funcCall(func, ...pars);
        },
      peg$c10 = function(ops, ret) {
          return [ops, ret]
        },
      peg$c11 = function(ret) {
          return [[], ret]
        },
      peg$c12 = function(ops) {
          return retStatement(ops);
        },
      peg$c13 = function(exp) {
          return print(exp);
        },
      peg$c14 = function(exp) {
          return {type: "Start",
          exp};
        },
      peg$c15 = /^[a-z0-9_]/,
      peg$c16 = peg$classExpectation([["a", "z"], ["0", "9"], "_"], false, false),
      peg$c17 = function(chars) { return {type:"Identifier", name: chars.join("")}},
      peg$c18 = /^[0-9]/,
      peg$c19 = peg$classExpectation([["0", "9"]], false, false),
      peg$c20 = ".",
      peg$c21 = peg$literalExpectation(".", false),
      peg$c22 = function(digits) { 
            return literal(Number(digits.flat().join("")))
          },
      peg$c23 = "-",
      peg$c24 = peg$literalExpectation("-", false),
      peg$c25 = function(sign, digits) { 
            return sign ? negativeLiteral(Number(digits.join(""))) : literal(Number(digits.join("")));
          },
      peg$c26 = "\"",
      peg$c27 = peg$literalExpectation("\"", false),
      peg$c28 = function(chars) { 
          return literal(chars.join(""));
         },
      peg$c29 = "START",
      peg$c30 = peg$literalExpectation("START", false),
      peg$c31 = "PRINT",
      peg$c32 = peg$literalExpectation("PRINT", false),
      peg$c33 = "(",
      peg$c34 = peg$literalExpectation("(", false),
      peg$c35 = ")",
      peg$c36 = peg$literalExpectation(")", false),
      peg$c37 = ",",
      peg$c38 = peg$literalExpectation(",", false),
      peg$c39 = "<-",
      peg$c40 = peg$literalExpectation("<-", false),
      peg$c41 = "FUNCTION",
      peg$c42 = peg$literalExpectation("FUNCTION", false),
      peg$c43 = "->",
      peg$c44 = peg$literalExpectation("->", false),
      peg$c45 = ":",
      peg$c46 = peg$literalExpectation(":", false),
      peg$c47 = "=",
      peg$c48 = peg$literalExpectation("=", false),
      peg$c49 = "BOOLEAN",
      peg$c50 = peg$literalExpectation("BOOLEAN", false),
      peg$c51 = function() { return (typeHandler.registerTypeUsage("Boolean"), typeHandler.getGuardFactory("Boolean")) },
      peg$c52 = "STRING",
      peg$c53 = peg$literalExpectation("STRING", false),
      peg$c54 = function() { return (typeHandler.registerTypeUsage("String"), typeHandler.getGuardFactory("String")) },
      peg$c55 = "CALLABLE",
      peg$c56 = peg$literalExpectation("CALLABLE", false),
      peg$c57 = function() { return (typeHandler.registerTypeUsage("Function"), typeHandler.getGuardFactory("Function")) },
      peg$c58 = "\uD83E\uDD37",
      peg$c59 = peg$literalExpectation("\uD83E\uDD37", false),
      peg$c60 = function() { return (typeHandler.registerTypeUsage("Any"), typeHandler.getGuardFactory("Any")) },
      peg$c61 = "NUMBER",
      peg$c62 = peg$literalExpectation("NUMBER", false),
      peg$c63 = function() { return (typeHandler.registerTypeUsage("Number"), typeHandler.getGuardFactory("Number")) },
      peg$c64 = "FALSE",
      peg$c65 = peg$literalExpectation("FALSE", false),
      peg$c66 = "TRUE",
      peg$c67 = peg$literalExpectation("TRUE", false),
      peg$c68 = "AND",
      peg$c69 = peg$literalExpectation("AND", false),
      peg$c70 = "OR",
      peg$c71 = peg$literalExpectation("OR", false),
      peg$c72 = "NOT",
      peg$c73 = peg$literalExpectation("NOT", false),
      peg$c74 = "EQUALS",
      peg$c75 = peg$literalExpectation("EQUALS", false),
      peg$c76 = "IDENTICAL",
      peg$c77 = peg$literalExpectation("IDENTICAL", false),
      peg$c78 = ">",
      peg$c79 = peg$literalExpectation(">", false),
      peg$c80 = ">=",
      peg$c81 = peg$literalExpectation(">=", false),
      peg$c82 = "<",
      peg$c83 = peg$literalExpectation("<", false),
      peg$c84 = "<=",
      peg$c85 = peg$literalExpectation("<=", false),
      peg$c86 = "+",
      peg$c87 = peg$literalExpectation("+", false),
      peg$c88 = "*",
      peg$c89 = peg$literalExpectation("*", false),
      peg$c90 = "^",
      peg$c91 = peg$literalExpectation("^", false),
      peg$c92 = "/",
      peg$c93 = peg$literalExpectation("/", false),
      peg$c94 = "CONCAT",
      peg$c95 = peg$literalExpectation("CONCAT", false),
      peg$c96 = "VARIABLE",
      peg$c97 = peg$literalExpectation("VARIABLE", false),
      peg$c98 = "[",
      peg$c99 = peg$literalExpectation("[", false),
      peg$c100 = "..",
      peg$c101 = peg$literalExpectation("..", false),
      peg$c102 = "]",
      peg$c103 = peg$literalExpectation("]", false),
      peg$c104 = function(from, to) { return (typeHandler.registerTypeUsage("NumberClosedInterval"), typeHandler.getGuardFactory("NumberClosedInterval", from, to)); },
      peg$c105 = function(from, to) { return (typeHandler.registerTypeUsage("NumberOpenInterval"), typeHandler.getGuardFactory("NumberOpenInterval", from, to)); },
      peg$c106 = function(value) { return (typeHandler.registerTypeUsage("ExactNumber"), typeHandler.getGuardFactory("ExactNumber", value)); },
      peg$c107 = function(body) {
            const over = overload({
              type: "Program",
              body: optionalList(body)
            })
            return {type: "Program",
              body: [...typeHandler.getGuards(), ...over.body]
            }
          },
      peg$c108 = function(head, tail) {
            return buildList(head, tail, 1);
          },
      peg$c109 = /^[ \t\n\r]/,
      peg$c110 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseStart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseProgram();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArithmeticsStatements() {
    var s0;

    s0 = peg$parseAddStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSubStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMulStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDivStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePowStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSingleLiteral();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseInnerStatements() {
    var s0;

    s0 = peg$parseVariableAssignment();
    if (s0 === peg$FAILED) {
      s0 = peg$parseVariableDeclaration();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePrintStatement();
      }
    }

    return s0;
  }

  function peg$parseExpression() {
    var s0;

    s0 = peg$parseFunctionExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseArithmeticsStatements();
    }

    return s0;
  }

  function peg$parseSingleLiteral() {
    var s0;

    s0 = peg$parseStringLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNumberLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIdentifier();
      }
    }

    return s0;
  }

  function peg$parseType() {
    var s0;

    s0 = peg$parseBoolean();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNumberClosedInterval();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumberOpenInterval();
        if (s0 === peg$FAILED) {
          s0 = peg$parseExactNumber();
          if (s0 === peg$FAILED) {
            s0 = peg$parseString();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFunction();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAny();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseNumber();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAddStatement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSingleLiteral();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePlus();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseArithmeticsStatements();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c1(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSubStatement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSingleLiteral();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMinus();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseArithmeticsStatements();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c2(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMulStatement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSingleLiteral();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMultiplication();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseArithmeticsStatements();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c3(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDivStatement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSingleLiteral();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDivision();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseArithmeticsStatements();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c4(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePowStatement() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseSingleLiteral();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePower();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseArithmeticsStatements();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c5(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVariableDeclaration() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseVariable();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIdentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseAssignment();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseExpression();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c6(s4, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVariableAssignment() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAssignment();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseExpression();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c7(s2, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionStatement() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    s0 = peg$currPos;
    s1 = peg$parseFunctionKeyWord();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFunctionParameters();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseType();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parse_();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseComma();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseType();
                  if (s10 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parse_();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseComma();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse_();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseType();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseFunctionResult();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseType();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse_();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseIdentifier();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseLeftBrace();
                          if (s12 !== peg$FAILED) {
                            s13 = [];
                            s14 = peg$currPos;
                            s15 = peg$parseIdentifier();
                            if (s15 !== peg$FAILED) {
                              s16 = [];
                              s17 = peg$parseComma();
                              while (s17 !== peg$FAILED) {
                                s16.push(s17);
                                s17 = peg$parseComma();
                              }
                              if (s16 !== peg$FAILED) {
                                s17 = peg$parse_();
                                if (s17 !== peg$FAILED) {
                                  s15 = [s15, s16, s17];
                                  s14 = s15;
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s14;
                                s14 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s14;
                              s14 = peg$FAILED;
                            }
                            while (s14 !== peg$FAILED) {
                              s13.push(s14);
                              s14 = peg$currPos;
                              s15 = peg$parseIdentifier();
                              if (s15 !== peg$FAILED) {
                                s16 = [];
                                s17 = peg$parseComma();
                                while (s17 !== peg$FAILED) {
                                  s16.push(s17);
                                  s17 = peg$parseComma();
                                }
                                if (s16 !== peg$FAILED) {
                                  s17 = peg$parse_();
                                  if (s17 !== peg$FAILED) {
                                    s15 = [s15, s16, s17];
                                    s14 = s15;
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s14;
                                  s14 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s14;
                                s14 = peg$FAILED;
                              }
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parseRightBrace();
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parse_();
                                if (s15 !== peg$FAILED) {
                                  s16 = peg$parseFunctionBodyStart();
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$parse_();
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$parseFunctionBody();
                                      if (s18 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c8(s4, s5, s11, s13, s18);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLeftBrace();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSingleLiteral();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parse_();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseComma();
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseSingleLiteral();
                  if (s10 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parse_();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseComma();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse_();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseSingleLiteral();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseRightBrace();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c9(s2, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionBody() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseInnerStatements();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseInnerStatements();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseReturnStatement();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c10(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseReturnStatement();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseReturnStatement() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFunctionResult();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseExpression();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c12(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePrintStatement() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePrintToken();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseExpression();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStartStatement() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKeywordStart();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFunctionExpression();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c14(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifier() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c15.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c15.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumberLiteral() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      if (peg$c18.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c18.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c20;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c18.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$c18.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c22(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c23;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c18.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c18.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c25(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseStringLiteral() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c26;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c15.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c15.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s4 = peg$c26;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c27); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c28(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseKeywordStart() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c29) {
      s0 = peg$c29;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c30); }
    }

    return s0;
  }

  function peg$parsePrintToken() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c31) {
      s0 = peg$c31;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }

    return s0;
  }

  function peg$parseLeftBrace() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 40) {
      s0 = peg$c33;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }

    return s0;
  }

  function peg$parseRightBrace() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c35;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }

    return s0;
  }

  function peg$parseComma() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c37;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c38); }
    }

    return s0;
  }

  function peg$parseAssignment() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c39) {
      s0 = peg$c39;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }

    return s0;
  }

  function peg$parseFunctionKeyWord() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c41) {
      s0 = peg$c41;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }

    return s0;
  }

  function peg$parseFunctionResult() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c43) {
      s0 = peg$c43;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }

    return s0;
  }

  function peg$parseFunctionParameters() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 58) {
      s0 = peg$c45;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }

    return s0;
  }

  function peg$parseFunctionBodyStart() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c47;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }

    return s0;
  }

  function peg$parseBoolean() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c49) {
      s1 = peg$c49;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c51();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseString() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c52) {
      s1 = peg$c52;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c53); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c54();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFunction() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c57();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAny() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c58) {
      s1 = peg$c58;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c59); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c60();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNumber() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c61) {
      s1 = peg$c61;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c63();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFalse() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c64) {
      s0 = peg$c64;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c65); }
    }

    return s0;
  }

  function peg$parseTrue() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c66) {
      s0 = peg$c66;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }

    return s0;
  }

  function peg$parseAnd() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c68) {
      s0 = peg$c68;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }

    return s0;
  }

  function peg$parseOr() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c70) {
      s0 = peg$c70;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c71); }
    }

    return s0;
  }

  function peg$parseNot() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c72) {
      s0 = peg$c72;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c73); }
    }

    return s0;
  }

  function peg$parseEqual() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c74) {
      s0 = peg$c74;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c75); }
    }

    return s0;
  }

  function peg$parseIdentical() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c76) {
      s0 = peg$c76;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }

    return s0;
  }

  function peg$parseGreater() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 62) {
      s0 = peg$c78;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }

    return s0;
  }

  function peg$parseGreaterEqual() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c80) {
      s0 = peg$c80;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c81); }
    }

    return s0;
  }

  function peg$parseLess() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 60) {
      s0 = peg$c82;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }

    return s0;
  }

  function peg$parseLessEqual() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c84) {
      s0 = peg$c84;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c85); }
    }

    return s0;
  }

  function peg$parsePlus() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c86;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c87); }
    }

    return s0;
  }

  function peg$parseMinus() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c23;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }

    return s0;
  }

  function peg$parseMultiplication() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 42) {
      s0 = peg$c88;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c89); }
    }

    return s0;
  }

  function peg$parsePower() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 94) {
      s0 = peg$c90;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c91); }
    }

    return s0;
  }

  function peg$parseDivision() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 47) {
      s0 = peg$c92;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c93); }
    }

    return s0;
  }

  function peg$parseConcat() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c94) {
      s0 = peg$c94;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }

    return s0;
  }

  function peg$parseVariable() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c96) {
      s0 = peg$c96;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c97); }
    }

    return s0;
  }

  function peg$parseNumberClosedInterval() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseNumber();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseNumber();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 91) {
        s3 = peg$c98;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.charCodeAt(peg$currPos) === 91) {
            s3 = peg$c98;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c99); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseNumberLiteral();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseNumberLiteral();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (input.substr(peg$currPos, 2) === peg$c100) {
            s5 = peg$c100;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c101); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (input.substr(peg$currPos, 2) === peg$c100) {
                s5 = peg$c100;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c101); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseNumberLiteral();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseNumberLiteral();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c102;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c103); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c104(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumberOpenInterval() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseNumber();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseNumber();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c33;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c33;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseNumberLiteral();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseNumberLiteral();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (input.substr(peg$currPos, 2) === peg$c100) {
            s5 = peg$c100;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c101); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (input.substr(peg$currPos, 2) === peg$c100) {
                s5 = peg$c100;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c101); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseNumberLiteral();
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseNumberLiteral();
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c35;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c36); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c105(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExactNumber() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseNumber();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseNumber();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 60) {
        s3 = peg$c82;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.charCodeAt(peg$currPos) === 60) {
            s3 = peg$c82;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseNumberLiteral();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseNumberLiteral();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s4 = peg$c78;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c79); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c106(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseProgram() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseSourceElements();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c107(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSourceElements() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSourceElement();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseSourceElement();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceElement();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c108(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSourceElement() {
    var s0;

    s0 = peg$parseStartStatement();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFunctionStatement();
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    if (peg$c109.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c110); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c109.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }
    }

    return s0;
  }


    function errorGuardBody(type) {
      return {
          "type": "BlockStatement",
          "body": [
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "x"
                  },
                  "prefix": true
                },
                "right": {
                  "type": "Literal",
                  "value": type
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "Literal",
                      "value": true,
                      "raw": "true"
                    }
                  }
                ]
              },
              "alternate": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "console"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "log"
                        }
                      },
                      "arguments": [
                        {
                          "type": "TemplateLiteral",
                          "quasis": [
                            {
                              "type": "TemplateElement",
                              "value": {
                                "raw": `Expected parameter type: ${type}, but `,
                              },
                              "tail": false
                            },
                            {
                              "type": "TemplateElement",
                              "value": {
                                "raw": " was given.",
                                "cooked": " was given."
                              },
                              "tail": true
                            }
                          ],
                          "expressions": [
                            {
                              "type": "UnaryExpression",
                              "operator": "typeof",
                              "argument": {
                                "type": "Identifier",
                                "name": "x"
                              },
                              "prefix": true
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
    }

    const typeHandler = (() => {
       const booleanGuard = {
         type: "FunctionDeclaration",
         id: {
           type: "Identifier",
           name: "isBoolean",
         },
         params: [
           {
             type: "Identifier",
             name: "x",
           }
         ],
         body: errorGuardBody("boolean"),
         generator: false,
         expression: false,
         async: false
       };
       const numberGuard = {
         type: "FunctionDeclaration",
         id: {
           type: "Identifier",
           name: "isNumber",
         },
         params: [
           {
             type: "Identifier",
             name: "x",
           }
         ],
         body: errorGuardBody("number"),
         generator: false,
         expression: false,
         async: false
       };
       const numberExactGuard = {
         type: "FunctionDeclaration",
         id: {
           type: "Identifier",
           name: "isExactNumber",
         },
         params: [
           {
             type: "Identifier",
             name: "x",
           },
           {
             type: "Identifier",
             name: "value",
           },
         ],
         body: {
           type: "BlockStatement",
           body: [
             {
               type: "ReturnStatement",
               argument: {
                 type: "LogicalExpression",
                 operator: "&&",
                 left: {
                   type: "BinaryExpression",
                   operator: "===",
                   left: {
                     type: "UnaryExpression",
                     operator: "typeof",
                     argument: {
                       type: "Identifier",
                       name: "x",
                     },
                     prefix: true,
                   },
                   right: {
                     type: "Literal",
                     value: "number",
                   }
                 },
                 right: {
                   type: "BinaryExpression",
                   operator: "===",
                   left: {
                     type: "Identifier",
                     name: "x",
                   },
                   right: {
                     type: "Identifier",
                     name: "value",
                   }
                 }
               }
             } 
           ],
         },
         generator: false,
         expression: false,
         async: false
       };
       const numberOpenIntervalGuard = {
         type: "FunctionDeclaration",
         id: {
           type: "Identifier",
           name: "isNumberOpenInterval",
         },
         params: [
           {
             type: "Identifier",
             name: "x",
           },
           {
             type: "Identifier",
             name: "start",
           },
           {
             type: "Identifier",
             name: "stop",
           }
         ],
         body: {
           type: "BlockStatement",
           body: [
             {
               type: "ReturnStatement",
               argument: {
                 type: "LogicalExpression",
                 operator: "&&",
                 left: {
                   type: "BinaryExpression",
                   operator: "===",
                   left: {
                     type: "UnaryExpression",
                     operator: "typeof",
                     argument: {
                       type: "Identifier",
                       name: "x",
                     },
                     prefix: true,
                   },
                   right: {
                     type: "Literal",
                     value: "number",
                   }
                 },
                 right: {
                   type: "LogicalExpression",
                   operator: "&&",
                   left: {
                     type: "BinaryExpression",
                     operator: ">",
                     left: {
                       type: "Identifier",
                       name: "x",
                     },
                     right: {
                       type: "Identifier",
                       name: "start",
                     }
                   },
                   right: {
                     type: "BinaryExpression",
                     operator: "<",
                     left: {
                       type: "Identifier",
                       name: "x",
                     },
                     right: {
                       type: "Identifier",
                       name: "stop",
                     }
                   },
                 }
               }
             }
           ],
         },
         generator: false,
         expression: false,
         async: false
       };
       const numberClosedIntervalGuard = {
         type: "FunctionDeclaration",
         id: {
           type: "Identifier",
           name: "isNumberClosedInterval",
         },
         params: [
           {
             type: "Identifier",
             name: "x",
           },
           {
             type: "Identifier",
             name: "start",
           },
           {
             type: "Identifier",
             name: "stop",
           }
         ],
         body: {
           type: "BlockStatement",
           body: [
             {
               type: "ReturnStatement",
               argument: {
                 type: "LogicalExpression",
                 operator: "&&",
                 left: {
                   type: "BinaryExpression",
                   operator: "===",
                   left: {
                     type: "UnaryExpression",
                     operator: "typeof",
                     argument: {
                       type: "Identifier",
                       name: "x",
                     },
                     prefix: true,
                   },
                   right: {
                     type: "Literal",
                     value: "number",
                   }
                 },
                 right: {
                   type: "LogicalExpression",
                   operator: "&&",
                   left: {
                     type: "BinaryExpression",
                     operator: ">=",
                     left: {
                       type: "Identifier",
                       name: "x",
                     },
                     right: {
                       type: "Identifier",
                       name: "start",
                     }
                   },
                   right: {
                     type: "BinaryExpression",
                     operator: "<=",
                     left: {
                       type: "Identifier",
                       name: "x",
                     },
                     right: {
                       type: "Identifier",
                       name: "stop",
                     }
                   },
                 }
               }
             }
           ],
         },
         generator: false,
         expression: false,
         async: false
       };
       const stringGuard = {
         type: "FunctionDeclaration",
         id: {
           type: "Identifier",
           name: "isString",
         },
         params: [
           {
             type: "Identifier",
             name: "x",
           }
         ],
         body: errorGuardBody("string"),
         generator: false,
         expression: false,
         async: false
       };
       const functionGuard = {
         type: "FunctionDeclaration",
         id: {
           type: "Identifier",
           name: "isFunction",
         },
         params: [
           {
             type: "Identifier",
             name: "x",
           }
         ],
         body: errorGuardBody("function"),
         generator: false,
         expression: false,
         async: false
       };
       const anyGuard = {
         type: "FunctionDeclaration",
         id: {
           type: "Identifier",
           name: "isAny",
         },
         params: [],
         body: {
           type: "BlockStatement",
           body: [
             {
               type: "ReturnStatement",
               argument: {
                 type: "Literal",
                 value: true,
               }
             }
           ],
         },
         generator: false,
         expression: false,
         async: false
       };

       const booleanGuardFactory = () => (tested) => (funcCall({
         type: "Identifier",
         name: "isBoolean",
       }, tested));
       const numberGuardFactory = () => (tested) => (funcCall({
         type: "Identifier",
         name: "isNumber",
       }, tested));
       const numberExactGuardFactory = (value) => (tested) => (funcCall({
         type: "Identifier",
         name: "isExactNumber",
       }, tested, value));
       const numberOpenIntervalGuardFactory = (from, to) => (tested) => (funcCall({
         type: "Identifier",
         name: "isNumberOpenInterval",
       }, tested, from, to));
       const numberClosedIntervalGuardFactory = (from, to) => (tested) => (funcCall({
         type: "Identifier",
         name: "isNumberClosedInterval",
       }, tested, from, to));
       const stringGuardFactory = () => (tested) => (funcCall({
         type: "Identifier",
         name: "isString",
       }, tested));
       const functionGuardFactory = () => (tested) => (funcCall({
         type: "Identifier",
         name: "isFunction",
       }, tested));
       const anyGuardFactory = () => (tested) => (funcCall({
         type: "Identifier",
         name: "isAny",
       }, tested));

       const types = ['Boolean', 'Number', 'ExactNumber', 'NumberOpenInterval', 'NumberClosedInterval', 'String', 'Function', 'Any'];
       const guards = [booleanGuard, numberGuard, numberExactGuard, numberOpenIntervalGuard, numberClosedIntervalGuard, stringGuard, functionGuard, anyGuardFactory];
       const factories = [booleanGuardFactory, numberGuardFactory, numberExactGuardFactory, numberOpenIntervalGuardFactory, numberClosedIntervalGuardFactory, stringGuardFactory, functionGuardFactory, anyGuardFactory];
       const typeToIsUsed = new Map(types.map(type => [type, false]));
       const typeToGuard = new Map(types.map((type, index) => [type, guards[index]]));
       const typeToFactory = new Map(types.map((type, index) => [type, factories[index]]));

       return {
         registerTypeUsage: (type) => {
           if (!types.includes(type)) return null;
           typeToIsUsed.set(type, true);
         },
         getGuardFactory: (type, ...args) => {
           if (!types.includes(type)) return null;
           return typeToFactory.get(type)(...args);
         },
         getGuards: () => {
           return types.filter(type => typeToIsUsed.get(type)).map(type => typeToGuard.get(type));
         }
       }
     })();

    function argNumber(n) {
      return {
        type: "BinaryExpression",
        operator: "==",
        left: {
          type: "MemberExpression",
          computed: false,
          object: {
            type: "Identifier",
            name: "arguments",
          },
          property: {
            type: "Identifier",
            name: "length",
          },
        },
        right: {
          type: "Literal",
          value: n,
        },
      };
    }

    function ifStatement(conditions, body) {
    return {
      type: "IfStatement",
      test: conditions.length === 1 ? conditions[0] : conditions.reduce((acc, val) => {
        return {
          type: "LogicalExpression",
          operator: "&&",
          left: acc,
          right: val,
        }
      }),
      consequent: {
        type: "BlockStatement",
        body: body,
      },
      alternate: null,
    };
  }

  function varDecl(par, newPar) {
    return {
      type: "VariableDeclaration",
      declarations: [
        {
          type: "VariableDeclarator",
          id: {
            type: "Identifier",
            name: par,
          },
          init: {
            type: "Identifier",
            name: newPar,
          },
        },
      ],
      kind: "var",
    };
  }

  const overload = function (parsedAST) {
    let entry;
    const map = new Map();
    var newTree = {
      type: "Program",
      body: [],
    };
    var funNames = [];

    parsedAST.body.forEach((statement) => {
      if (statement.type === "Start") {
        entry = statement.exp;
      }
      if (statement.type === "FunctionDeclaration") {
        if (map.has(statement.id.name)) {
          var functions = map.get(statement.id.name).functions;
          var maxParams = map.get(statement.id.name).maxParams;
          functions.push(statement);
          map.set(statement.id.name, {
            functions: functions,
            maxParams: Math.max(maxParams, statement.params.length),
          });
        } else {
          map.set(statement.id.name, {
            functions: [statement],
            maxParams: statement.params.length,
          });
          funNames.push(statement.id.name);
        }
      }
    });

    funNames.forEach((name) => {
      var currentFunc = map.get(name);
      const body = []
      var myFunc = {
        type: "FunctionDeclaration",
        id: {
          type: "Identifier",
          name: name,
        },
        params: [],
        body: {
          type: "BlockStatement",
          body,
        },
        generator: false,
        expression: false,
        async: false,
      };

      for (var i = 0; i < currentFunc.maxParams; i++) {
        myFunc.params.push({
          type: "Identifier",
          name: "p" + (i + 1),
        });
      }

      for (var i = 0; i < currentFunc.functions.length; i++) {
        for (var j = 0; j < currentFunc.functions[i].params.length; j++) {
          body.push(
            varDecl(currentFunc.functions[i].params[j].name, "p" + (j + 1))
          );
        }

        var ifSt = ifStatement(
          [argNumber(currentFunc.functions[i].params.length),
          ...currentFunc.functions[i].types.map((typeFactory, index) => {
            return typeFactory({
              type: "Identifier",
              name: `p${index + 1}`
            })
          })],
          currentFunc.functions[i].body.body
        );

        body.push(ifSt);
      }

      newTree.body.push(myFunc);
    });

    if (entry != undefined) {
      newTree.body.push(entry);
    }

    return newTree;
  };

     function extractList(list, index) {
      return list.map(function(element) { return element[index]; });
    }

    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index));
    }
    function optionalList(value) {
      return value !== null ? value : [];
    }
    function binaryExp(sign, val1, val2) {
      var obj = {
          "type": "BinaryExpression",
          "operator": sign,
          "left": val1,
          "right": val2 
      }
      return obj;
    }

    function funDeclaration(funcName, par, res, types) {
      
      var ops = [];
      var params = [];

      for (var i = 0; i < par.length; i++) {
        params.push(par[i][0])
      }

      if (res[0].length > 0) {
        for (var i = 0; i < res[0].length; i++) {
          ops.push(res[0][i]);
        }
      }
      ops.push(res[1]);

      var obj = {
        type: "FunctionDeclaration",
        id: funcName,
        params: params,
        body: {
          type: "BlockStatement",
          "body": ops
        },
        "generator": false,
        "expression": false,
        "async": false,
      }

      obj = types ? {...obj, types} : obj;

      return obj;
    }

    function expStatement(funcName, ...args) {
      var obj = {
        "type": "ExpressionStatement",
        "expression": {
          "type": "CallExpression",
          "callee": funcName,
          "arguments": args
        }
      }

      return obj;
    }

    function funcCall(funcName, ...args) {
      return {
          "type": "CallExpression",
          "callee": funcName,
          "arguments": args
        }
    }

    function varDeclaration(ident, binExp) {
      var obj = {
        "type": "VariableDeclaration",
        "declarations": [
          {
            "type": "VariableDeclarator",
            "id": ident,
            "init": binExp
          }
        ],
        "kind": "var",
      }
      return obj;
    }

    function varAssignment(ident, expression) {
      var obj = {
        "type": "ExpressionStatement",
        "expression": {
          "type": "AssignmentExpression",
          "operator": "=",
          "left": ident,
          "right": expression
        }
      }

      return obj;
    }

    function retStatement(ops) {
      var obj = {
        "type": "ReturnStatement",
        "argument": ops
      }
      return obj;
    }

    function literal(val) {
      var obj = { type: "Literal", value: val }
      return obj;
    }

    function negativeLiteral(val) {
      return {
        "type": "UnaryExpression",
        "operator": "-",
        "argument": {
          "type": "Literal",
          "value": val
        },
        "prefix": true
      }
    }

    function print(exp) {
      var obj = {
        "type": "ExpressionStatement",
        "expression": {
          "type": "CallExpression",
          "callee": {
            "type": "MemberExpression",
            "computed": false,
            "object": {
              "type": "Identifier",
              "name": "console"
            },
            "property": {
              "type": "Identifier",
              "name": "log"
            }
          },
          arguments: [
            exp
          ]
        }
      }
      return obj;
    }
      


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
