// Tokeny jednoznakowe
LeftBrace // (
RightBrace // )
Comma // ,

// Tokent wieloznakowe
Assignment // <-
Identifier // Identyfikator -> ciÄ…g znakÃ³w zaczynajÄ…cy siÄ™ dowolnÄ… literÄ… a potem litery / cyfry

// Tokeny zwiÄ…zane z funckjÄ…
FunctionKeyWord // FUNCTION
FunctionResult // -> 
FunctionParameters // :
FunctionBodyStart // =

// Typy
Boolean // BOOLEAN
Number // NUMBER
NumberClosedInterval // NUMBER[SingleNumber..SingleNumber] np. NUMBER[15..17] => liczba 15 <= x <= 17
NumberOpenInterval // NUMBER(SingleNumber..SingleNumber) np. NUMBER(15..17) => liczba 15 < x < 17
ExactNumber // NUMBER<SingleNumber> np. NUMBER<3> => dokÅ‚adnie 3
String // STRING
Function // FUNCTION
Any // ðŸ¤· => dowolny typ

// LiteraÅ‚y
False // FALSE 
True // TRUE
NumberLiteral // dowolna liczba np. 1, 5, 22.22
StringLiteral // "znaki" 

// Operatory logiczne
And // AND => tÅ‚umaczony na && w JS
Or // OR => tÅ‚umaczony na || w JS
Not // NOT => tÅ‚umaczony na ! w JS
Equal // EQUALS => tÅ‚umaczony na == w JS
Identical // IDENTICAL => tÅ‚umaczony na === w JS
Greater // >
GreaterEqual // >=
Less // <
LessEqual // <=

// Operatory arytmetyczne 
Plus // +
Minus // -
Multiplcation // *
Power // ^
Division // /

// PozostaÅ‚e operatory
Concat // CONCAT 
